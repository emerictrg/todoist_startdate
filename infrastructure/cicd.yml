AWSTemplateFormatVersion: '2010-09-09'
Description: Todoist start  date project:CICD stack

Resources:

  ImageRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "todoist-ci"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowPushPull"
            Effect: "Allow"
            Principal:
              AWS: 
                - !Sub "arn:aws:iam::${AWS::AccountId}:user/todoist"
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"

  BuilderServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      RoleName: "todoist-codebuilder-role"

  Builder:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "todoist-start-date-ci"
      Description: "Todoist Project start date continuous integration"
      Artifacts: 
        Type: "CODEPIPELINE"
      LogsConfig: 
        CloudWatchLogs:
          Status: "ENABLED"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub
          - "${ImageURI}:latest"
          - { "ImageURI": !GetAtt "ImageRepository.RepositoryUri" }
        ImagePullCredentialsType: "CODEBUILD"
      Source:
        Type: "CODEPIPELINE"
      ServiceRole: !GetAtt "BuilderServiceRole.Arn"
      Visibility: "PRIVATE"
      Tags:
        - Key: "Application"
          Value: "Todoist start date"
      
  Deployment:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: "TodoistStartDate"
      ComputePlatform: "Lambda"
      Tags:
        - Key: "Application"
          Value: "Todoist start date"

  DeploymentConfig:
    Type: "AWS::CodeDeploy::DeploymentConfig"
    Properties:
      ComputePlatform: "Lambda"
      DeploymentConfigName: "TodoistStartDateDeploymentConfig"
      TrafficRoutingConfig:
        Type: "AllAtOnce"

  DeploymentGroupRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:  
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda"
      RoleName: "todoist-codedeploy-role"

  DeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref "Deployment"
      AutoRollbackConfiguration:
        Enabled: True
        Events:
          - "DEPLOYMENT_FAILURE"
          - "DEPLOYMENT_STOP_ON_ALARM"
          - "DEPLOYMENT_STOP_ON_REQUEST"
      DeploymentConfigName: !Ref "DeploymentConfig"
      DeploymentGroupName: "TodoistStartDateDeploymentGroup"
      # https://stackoverflow.com/questions/52636182/ec2tagfilters-in-deployment-group-for-computeplatform-lambda
      DeploymentStyle:
        DeploymentOption: "WITH_TRAFFIC_CONTROL"
        DeploymentType: "BLUE_GREEN"
      ServiceRoleArn: !GetAtt "DeploymentGroupRole.Arn"
      Tags:
        - Key: "Application"
          Value: "Todoist start date"

  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess"
        - "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess"
      Policies:
        - PolicyName: "allow-all-lambda-source"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource: "*"
      RoleName: "todoist-codepipeline-role"

  DeploymentPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: "TodoistCodePipeline"
      RoleArn: !GetAtt "PipelineRole.Arn"
      ArtifactStore:
        Type: "S3"
        Location: "{{resolve:ssm:TodoistLambdaBucket:2}}"
      RestartExecutionOnUpdate: False
      Stages:
        - Name: "Source"
          Actions:
            - ActionTypeId:
                Category: "Source"
                Owner: "ThirdParty"
                Provider: "GitHub"
                Version: 1
              Name: "DownloadSource"
              Configuration:
                Owner: "emerictrg"
                Repo: "todoist_startdate"
                Branch: "main"
                OAuthToken: "{{resolve:ssm:TodoistgithubAccessToken:2}}"
              OutputArtifacts:
                - Name: "todoist-source"
        - Name: "Build"
          Actions:
            - ActionTypeId:
               Category: "Build"
               Owner: "AWS"
               Provider: "CodeBuild"
               Version: 1
              Name: "TestAndBuild"
              Configuration:
                ProjectName: !Ref "Builder"
              InputArtifacts:
                - Name: "todoist-source"
              OutputArtifacts:
                - Name: "todoist-packaged"
      Tags:
        - Key: "Application"
          Value: "Todoist start date"

  PipelineWebhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties: 
      Authentication: "GITHUB_HMAC"
      AuthenticationConfiguration: 
        SecretToken: "{{resolve:ssm:TodoistGithubWebhookSecret:2}}"
      Filters: 
        - JsonPath: "$.ref"
          MatchEquals: "refs/heads/{Branch}"
      Name: "TodoistGithubWebhook"
      RegisterWithThirdParty: True
      TargetAction: "DownloadSource"
      TargetPipeline: !Ref "DeploymentPipeline"
      TargetPipelineVersion: !GetAtt "DeploymentPipeline.Version"


